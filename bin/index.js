#!/usr/bin/env node
import d from"figlet";import e from"inquirer";import f from"gradient-string";import g from"ora";import a from"shelljs";import{appendFile as h}from"fs";import b from"yargs";import i from"chalk";a.config.silent=!0;let j=b(process.argv.slice(2));function k(a){console.log(i.bold.greenBright(a))}function l(a){console.log(i.yellow(a))}function m(a){console.log(i.bold.redBright(a))}function n(a){console.log(i.inverse.bold(a))}async function o(b){let c=await e.prompt(b).catch(b=>{b.isTtyError,b(b),a.exit(1)});return c}async function p(){let{response:b}=await o([{name:"response",message:"Would you like to the project in VS Code?",type:"list",choices:["yes","no"]}]);"yes"===b&&a.exec("code .",b=>{0!==b?(l("\nProject created successfully. Failed to open VS Code or VS Code not found"),a.exit(1)):(k("\nSuccessfully opened the project in VS code."),a.exit(1))})}function q(b,c){let d=g("Installing Tailwind CSS...").start();a.cd(b),a.exec("npm install -D tailwindcss postcss autoprefixer",async b=>{0!==b?(m("Error: While installing create react app"),a.exit(1)):(d.succeed(),a.exec("npx tailwindcss init -p"),k("\nSuccessfully installed Tailwind CSS."),a.rm("tailwind.config.js"),h("tailwind.config.js","react"===c?'module.exports = {\n              content: ["./src/**/*.{js,jsx,ts,tsx}"],\n              theme: {\n                extend: {},\n              },\n              plugins: [],\n            };\n        ':'module.exports = {\n              content: [\n                "./pages/**/*.{js,ts,jsx,tsx}",\n                "./components/**/*.{js,ts,jsx,tsx}",\n              ],\n              theme: {\n                extend: {},\n              },\n              plugins: [],\n            }\n            ',(b,a)=>{a?m(a):k("Successfully configured "+f.cristal("'Tailwind.config.js'\n"))}),await new Promise(a=>setTimeout(a,500)),await p())})}async function r(b,e){let{fileName:c}=await o([{type:"input",name:"fileName",message:"Enter the project name?"}]),f=g(`Running create-${b}-app...`).start();if("js"===e)a.exec(`npx create-${b}-app ${c}`,async d=>{if(0!==d)m(`
Error While installing create-${b}-app. Try changing the file name.`),a.exit(1);else{f.succeed(),k(`
Installed create-${b}-app successfully.
`);let{dependencies:e}=await o([{name:"dependencies",message:"Would you like to install the following dependencies?",type:"list",choices:["Plain project","Tailwind CSS"]}]);"Tailwind CSS"===e?q(c,b):(k("Done.\n"),await new Promise(a=>setTimeout(a,500)),a.cd(c),await p())}});else{let d;d="next"===b?`npx create-next-app@latest ${c} --typescript`:`npx create-react-app ${c} --template typescript`,a.exec(d,async d=>{if(0!==d)m(`
Error While installing create-${b}-app --template typescript. Try changing the file name.`),a.exit(1);else{f.succeed(),k(`
Installed create-${b}-app --template typescript successfully.
`);let{dependencies:e}=await o([{name:"dependencies",message:"Would you like to install the following dependencies?",type:"list",choices:["Plain project","Tailwind CSS"]}]);"Tailwind CSS"===e?q(c):(k("Done.\n"),await new Promise(a=>setTimeout(a,500)),a.cd(c),await p())}})}}async function s(a){d("Sara CLI",function(b,a){console.log(f.pastel.multiline(a))}),await new Promise(a=>setTimeout(a,1e3));let{framework:b}=await o([{name:"framework",message:"Which framework would you like to use?",type:"list",choices:["React js","Next js"]}]);r("React js"===b?"react":"next",a)}let c=()=>{j.command("init","Create a project by selecting a language.",{js:{describe:"Language - JavaScript"},ts:{describe:"Language - TypeScript"}}).example("sara init --js or sara init --ts");let a=j.argv;a.js&&"init"===a._[0]?s("js"):a.ts&&"init"===a._[0]?s("ts"):j.showHelp()};c()